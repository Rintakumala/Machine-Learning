{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# membaca dataset \n",
    "df = pd.read_csv(\"hotel_bookings.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hotel</th>\n",
       "      <th>is_canceled</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>arrival_date_year</th>\n",
       "      <th>arrival_date_month</th>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <th>adults</th>\n",
       "      <th>...</th>\n",
       "      <th>deposit_type</th>\n",
       "      <th>agent</th>\n",
       "      <th>company</th>\n",
       "      <th>days_in_waiting_list</th>\n",
       "      <th>customer_type</th>\n",
       "      <th>adr</th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>total_of_special_requests</th>\n",
       "      <th>reservation_status</th>\n",
       "      <th>reservation_status_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>342</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>737</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>304.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>240.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          hotel  is_canceled  lead_time  arrival_date_year arrival_date_month  \\\n",
       "0  Resort Hotel            0        342               2015               July   \n",
       "1  Resort Hotel            0        737               2015               July   \n",
       "2  Resort Hotel            0          7               2015               July   \n",
       "3  Resort Hotel            0         13               2015               July   \n",
       "4  Resort Hotel            0         14               2015               July   \n",
       "\n",
       "   arrival_date_week_number  arrival_date_day_of_month  \\\n",
       "0                        27                          1   \n",
       "1                        27                          1   \n",
       "2                        27                          1   \n",
       "3                        27                          1   \n",
       "4                        27                          1   \n",
       "\n",
       "   stays_in_weekend_nights  stays_in_week_nights  adults  ...  deposit_type  \\\n",
       "0                        0                     0       2  ...    No Deposit   \n",
       "1                        0                     0       2  ...    No Deposit   \n",
       "2                        0                     1       1  ...    No Deposit   \n",
       "3                        0                     1       1  ...    No Deposit   \n",
       "4                        0                     2       2  ...    No Deposit   \n",
       "\n",
       "   agent company days_in_waiting_list customer_type   adr  \\\n",
       "0    NaN     NaN                    0     Transient   0.0   \n",
       "1    NaN     NaN                    0     Transient   0.0   \n",
       "2    NaN     NaN                    0     Transient  75.0   \n",
       "3  304.0     NaN                    0     Transient  75.0   \n",
       "4  240.0     NaN                    0     Transient  98.0   \n",
       "\n",
       "   required_car_parking_spaces  total_of_special_requests  reservation_status  \\\n",
       "0                            0                          0           Check-Out   \n",
       "1                            0                          0           Check-Out   \n",
       "2                            0                          0           Check-Out   \n",
       "3                            0                          0           Check-Out   \n",
       "4                            0                          1           Check-Out   \n",
       "\n",
       "  reservation_status_date  \n",
       "0              2015-07-01  \n",
       "1              2015-07-01  \n",
       "2              2015-07-02  \n",
       "3              2015-07-02  \n",
       "4              2015-07-03  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.iloc[:2999]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A. Data Cleaning & Preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2999 entries, 0 to 2998\n",
      "Data columns (total 32 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   hotel                           2999 non-null   object \n",
      " 1   is_canceled                     2999 non-null   int64  \n",
      " 2   lead_time                       2999 non-null   int64  \n",
      " 3   arrival_date_year               2999 non-null   int64  \n",
      " 4   arrival_date_month              2999 non-null   object \n",
      " 5   arrival_date_week_number        2999 non-null   int64  \n",
      " 6   arrival_date_day_of_month       2999 non-null   int64  \n",
      " 7   stays_in_weekend_nights         2999 non-null   int64  \n",
      " 8   stays_in_week_nights            2999 non-null   int64  \n",
      " 9   adults                          2999 non-null   int64  \n",
      " 10  children                        2999 non-null   float64\n",
      " 11  babies                          2999 non-null   int64  \n",
      " 12  meal                            2999 non-null   object \n",
      " 13  country                         2998 non-null   object \n",
      " 14  market_segment                  2999 non-null   object \n",
      " 15  distribution_channel            2999 non-null   object \n",
      " 16  is_repeated_guest               2999 non-null   int64  \n",
      " 17  previous_cancellations          2999 non-null   int64  \n",
      " 18  previous_bookings_not_canceled  2999 non-null   int64  \n",
      " 19  reserved_room_type              2999 non-null   object \n",
      " 20  assigned_room_type              2999 non-null   object \n",
      " 21  booking_changes                 2999 non-null   int64  \n",
      " 22  deposit_type                    2999 non-null   object \n",
      " 23  agent                           2534 non-null   float64\n",
      " 24  company                         123 non-null    float64\n",
      " 25  days_in_waiting_list            2999 non-null   int64  \n",
      " 26  customer_type                   2999 non-null   object \n",
      " 27  adr                             2999 non-null   float64\n",
      " 28  required_car_parking_spaces     2999 non-null   int64  \n",
      " 29  total_of_special_requests       2999 non-null   int64  \n",
      " 30  reservation_status              2999 non-null   object \n",
      " 31  reservation_status_date         2999 non-null   object \n",
      "dtypes: float64(4), int64(16), object(12)\n",
      "memory usage: 749.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hotel                                0\n",
       "is_canceled                          0\n",
       "lead_time                            0\n",
       "arrival_date_year                    0\n",
       "arrival_date_month                   0\n",
       "arrival_date_week_number             0\n",
       "arrival_date_day_of_month            0\n",
       "stays_in_weekend_nights              0\n",
       "stays_in_week_nights                 0\n",
       "adults                               0\n",
       "children                             0\n",
       "babies                               0\n",
       "meal                                 0\n",
       "country                              1\n",
       "market_segment                       0\n",
       "distribution_channel                 0\n",
       "is_repeated_guest                    0\n",
       "previous_cancellations               0\n",
       "previous_bookings_not_canceled       0\n",
       "reserved_room_type                   0\n",
       "assigned_room_type                   0\n",
       "booking_changes                      0\n",
       "deposit_type                         0\n",
       "agent                              465\n",
       "company                           2876\n",
       "days_in_waiting_list                 0\n",
       "customer_type                        0\n",
       "adr                                  0\n",
       "required_car_parking_spaces          0\n",
       "total_of_special_requests            0\n",
       "reservation_status                   0\n",
       "reservation_status_date              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Terdapat 3 feature yang NAN yaitu country, agent, dan company."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hotel</th>\n",
       "      <th>is_canceled</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>arrival_date_year</th>\n",
       "      <th>arrival_date_month</th>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <th>adults</th>\n",
       "      <th>...</th>\n",
       "      <th>deposit_type</th>\n",
       "      <th>agent</th>\n",
       "      <th>company</th>\n",
       "      <th>days_in_waiting_list</th>\n",
       "      <th>customer_type</th>\n",
       "      <th>adr</th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>total_of_special_requests</th>\n",
       "      <th>reservation_status</th>\n",
       "      <th>reservation_status_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>2015</td>\n",
       "      <td>July</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>2015-07-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           hotel  is_canceled  lead_time  arrival_date_year  \\\n",
       "30  Resort Hotel            0        118               2015   \n",
       "\n",
       "   arrival_date_month  arrival_date_week_number  arrival_date_day_of_month  \\\n",
       "30               July                        27                          1   \n",
       "\n",
       "    stays_in_weekend_nights  stays_in_week_nights  adults  ...  deposit_type  \\\n",
       "30                        4                    10       1  ...    No Deposit   \n",
       "\n",
       "    agent company days_in_waiting_list customer_type   adr  \\\n",
       "30    NaN     NaN                    0     Transient  62.0   \n",
       "\n",
       "    required_car_parking_spaces  total_of_special_requests  \\\n",
       "30                            0                          2   \n",
       "\n",
       "    reservation_status reservation_status_date  \n",
       "30           Check-Out              2015-07-15  \n",
       "\n",
       "[1 rows x 32 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['country'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PRT    1774\n",
       "ESP     343\n",
       "GBR     316\n",
       "IRL     143\n",
       "FRA      79\n",
       "DEU      38\n",
       "NLD      35\n",
       "CN       28\n",
       "USA      27\n",
       "BEL      22\n",
       "CHE      22\n",
       "POL      19\n",
       "RUS      18\n",
       "ITA      15\n",
       "BRA      13\n",
       "ROU      12\n",
       "AUT      10\n",
       "FIN       8\n",
       "SWE       7\n",
       "LVA       6\n",
       "DNK       5\n",
       "LUX       4\n",
       "ARG       4\n",
       "NOR       4\n",
       "AUS       3\n",
       "IND       3\n",
       "CHN       3\n",
       "MEX       2\n",
       "EST       2\n",
       "DZA       2\n",
       "LTU       2\n",
       "CHL       2\n",
       "MOZ       2\n",
       "OMN       2\n",
       "TUR       2\n",
       "MAR       2\n",
       "SVN       2\n",
       "CZE       2\n",
       "ZWE       1\n",
       "SRB       1\n",
       "ZMB       1\n",
       "GRC       1\n",
       "PRI       1\n",
       "CYM       1\n",
       "ISR       1\n",
       "UKR       1\n",
       "AGO       1\n",
       "SMR       1\n",
       "ALB       1\n",
       "ZAF       1\n",
       "BLR       1\n",
       "CPV       1\n",
       "BWA       1\n",
       "Name: country, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['country'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30      NaN\n",
       "155     PRT\n",
       "156     PRT\n",
       "224     GBR\n",
       "226     PRT\n",
       "263     POL\n",
       "264     PRT\n",
       "265     EST\n",
       "288     GBR\n",
       "289     PRT\n",
       "290     CZE\n",
       "337     ESP\n",
       "351     ESP\n",
       "352     AUS\n",
       "354     PRT\n",
       "355     ESP\n",
       "356     ESP\n",
       "387     PRT\n",
       "388     PRT\n",
       "407     PRT\n",
       "830     PRT\n",
       "833     PRT\n",
       "834     PRT\n",
       "856     PRT\n",
       "1237    PRT\n",
       "1348    PRT\n",
       "1362    PRT\n",
       "1717    PRT\n",
       "1816    PRT\n",
       "Name: country, dtype: object"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df['reservation_status_date'] == '2015-07-15') & (df['customer_type'] == 'Transient')]['country']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dari value count terbanyak adalah PRT dan dilihat dari pendakatan tanggal reservasi dan tipe customer adalah PRT atau portugal jadi saya akan mengisi data nan country sebagai PRT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['country'] = df['country'].fillna('PRT')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['agent'] = df['agent'].fillna(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Untuk Mengisi Agent dengan mengganti nan sebagai id baru yaitu 0 dikarenakan ketika kita salah mengisikan agentnya dapat merugikan agent yg lain ataupun agent itu sendiri ketika mereka tidak membooking nya."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop company\n",
    "df = df.drop(['company'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Saya meng drop company karena 90% datanya adalah NAN sehingga akan menjadikan data tidak representative ketika nanti diisi dengan mean median ataupun diisi dari memperhatikan feature yang lain dan akan menjadi bias ketika dijadikan feature untuk model mechine learning.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corrmat = df.corr()\n",
    "top_corr_features = corrmat.index\n",
    "plt.figure(figsize=(20,20))\n",
    "\n",
    "#plot heat map\n",
    "g=sns.heatmap(df.corr(),annot=True,cmap=\"RdYlGn\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "required_car_parking_spaces       0.286929\n",
       "lead_time                         0.209389\n",
       "booking_changes                   0.128580\n",
       "adr                               0.096207\n",
       "adults                            0.075404\n",
       "days_in_waiting_list              0.063694\n",
       "total_of_special_requests         0.059526\n",
       "arrival_date_day_of_month         0.051144\n",
       "stays_in_week_nights              0.044800\n",
       "children                          0.035620\n",
       "agent                             0.025981\n",
       "stays_in_weekend_nights           0.019780\n",
       "babies                            0.014373\n",
       "arrival_date_week_number          0.010482\n",
       "arrival_date_year                      NaN\n",
       "is_repeated_guest                      NaN\n",
       "previous_cancellations                 NaN\n",
       "previous_bookings_not_canceled         NaN\n",
       "Name: is_canceled, dtype: float64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlation = df.corr()[\"is_canceled\"]\n",
    "correlation.abs().sort_values(ascending=False)[1:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dari heatmap dan dara corr yang terlah diurutkan berdasarkan nilai tertinggi terhadap is canceled memperlihatkan beberapa feature yang memiliki nilai max di 0.286 yaitu required_car_parking_spaces "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e75b55dec8>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,8))\n",
    "sns.boxplot(x = 'customer_type', y = 'stays_in_week_nights', data = df, hue = \"is_canceled\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e75bae78c8>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,8))\n",
    "sns.boxplot(x = 'customer_type', y = 'stays_in_week_nights', data = df, hue = \"hotel\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dari boxplot diatas dapat dijelaskan bahwa kebanyakan org yang mencancel adalah customer type yang contract berdurasi antara 5 sampai 10 minggu yang berada di resort hotel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e759902048>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,8))\n",
    "sns.boxplot(x = 'is_canceled', y = 'lead_time', data = df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "banyaknya leadtime tidak memperlihatkan perbedaan dari cancel atau tidak di cancel karena memiliki pola gambar yang tidak jauh berbeda"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e75bc3cd48>"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,8))\n",
    "sns.barplot(x = 'is_canceled', y = 'booking_changes', data = df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dari boxplot tersebut memperlihatkan bahwa orang yang melakukan banyak reschedulle cenderung untuk tidak mencancel book nya"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e75d240088>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,8))\n",
    "sns.barplot(x = 'is_canceled', y = 'lead_time', data = df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "orang yang melakukan cancelation cenderung memiliki lead time yang tinggi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Building & Hyper-parameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>booking_changes</th>\n",
       "      <th>adr</th>\n",
       "      <th>adults</th>\n",
       "      <th>is_canceled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>342</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>737</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   required_car_parking_spaces  lead_time  booking_changes   adr  adults  \\\n",
       "0                            0        342                3   0.0       2   \n",
       "1                            0        737                4   0.0       2   \n",
       "2                            0          7                0  75.0       1   \n",
       "3                            0         13                0  75.0       1   \n",
       "4                            0         14                0  98.0       2   \n",
       "\n",
       "   is_canceled  \n",
       "0            0  \n",
       "1            0  \n",
       "2            0  \n",
       "3            0  \n",
       "4            0  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# splitting model\n",
    "\n",
    "df_baru = df[['required_car_parking_spaces', 'lead_time', 'booking_changes', 'adr', 'adults', 'is_canceled']].copy()\n",
    "df_baru.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df_baru.drop(['is_canceled'], axis=1)\n",
    "y = df_baru['is_canceled']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prediksi\n",
    "y_pred = model.predict(x_test) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>booking_changes</th>\n",
       "      <th>adr</th>\n",
       "      <th>adults</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2399</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>50.4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      required_car_parking_spaces  lead_time  booking_changes   adr  adults\n",
       "2399                            0         12                0  50.4       2"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.iloc[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0], dtype=int64)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# trying to predict using model\n",
    "coba = x_test.iloc[:1]\n",
    "model.predict(coba)\n",
    "# coba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.68528553563985"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6933333333333334"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dari percobaan diatas yang memiliki features tersebut menghasilkan prediksi 0 model score test 0.69"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyper-parameter Tuning Randomized Search CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1.0,\n",
       " 'class_weight': None,\n",
       " 'dual': False,\n",
       " 'fit_intercept': True,\n",
       " 'intercept_scaling': 1,\n",
       " 'l1_ratio': None,\n",
       " 'max_iter': 100,\n",
       " 'multi_class': 'auto',\n",
       " 'n_jobs': None,\n",
       " 'penalty': 'l2',\n",
       " 'random_state': None,\n",
       " 'solver': 'lbfgs',\n",
       " 'tol': 0.0001,\n",
       " 'verbose': 0,\n",
       " 'warm_start': False}"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Parameter yang dipakai di model asli\n",
    "model.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n",
       " 'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n",
       " 'max_iter': [1, 10, 100, 1000, 10000]}"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# parameter model logistic regression yang akan dituned + nilai yang mungkin\n",
    "\n",
    "penalty = ['l1', 'l2', 'elasticnet', 'none']\n",
    "solver = ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n",
    "max_iter = [1, 10, 100, 1000, 10000]\n",
    "\n",
    "param = {'penalty': penalty, 'solver': solver, 'max_iter': max_iter}\n",
    "param"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mencari parameter terbaik pada model: logistic regression\n",
    "\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "model_LR = LogisticRegression()\n",
    "model_LR_RS = RandomizedSearchCV(\n",
    "    estimator = model_LR, param_distributions= param, cv = 5\n",
    ")\n",
    "\n",
    "# model_LR2_GS = GridSearchCV( model_LR2, param, cv=5, error_score=0.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'solver': 'lbfgs', 'penalty': 'l2', 'max_iter': 1000}"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_LR_RS.fit(x_train, y_train)\n",
    "model_LR_RS.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "hasil tersebut adalah parameter terbaik dari params yaitu: {'solver': 'lbfgs', 'penalty': 'l2', 'max_iter': 1000}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6933333333333334"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6933333333333334"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_LogReg_Baru = LogisticRegression(solver='lbfgs', penalty = 'l2', max_iter = 10000)\n",
    "\n",
    "model_LogReg_Baru.fit(x_train, y_train)\n",
    "model_LogReg_Baru.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Grid Search CV**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "model_LR2 = LogisticRegression()\n",
    "model_LR2_GS = GridSearchCV(\n",
    "    model_LR2, param, cv = 5\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: penalty='none' is not supported for the liblinear solver\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\svm\\_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
      "\n",
      "  FitFailedWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\utils\\optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n",
      "  \"number of iterations.\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: penalty='none' is not supported for the liblinear solver\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: penalty='none' is not supported for the liblinear solver\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: penalty='none' is not supported for the liblinear solver\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\linear_model\\_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got elasticnet penalty.\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\Users\\USER\\Anaconda3\\envs\\MyEnv\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:536: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "ValueError: penalty='none' is not supported for the liblinear solver\n",
      "\n",
      "  FitFailedWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'max_iter': 10000, 'penalty': 'none', 'solver': 'sag'}"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_LR2_GS.fit(x_train, y_train)\n",
    "model_LR2_GS.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "hasil tersebut adalah parameter terbaik dari params yaitu: {'max_iter': 10000, 'penalty': 'none', 'solver': 'sag'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6933333333333334"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6933333333333334"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_LogReg_Baru_2 = LogisticRegression(solver='sag', penalty = 'none', max_iter = 10000)\n",
    "\n",
    "model_LogReg_Baru_2.fit(x_train, y_train)\n",
    "model_LogReg_Baru_2.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=10, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=200,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_random = RandomForestClassifier(max_depth = 10, min_samples_leaf = 1, \n",
    "                               min_samples_split = 2, n_estimators = 200)\n",
    "model_random.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_ran = model_random.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>booking_changes</th>\n",
       "      <th>adr</th>\n",
       "      <th>adults</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2399</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>50.4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      required_car_parking_spaces  lead_time  booking_changes   adr  adults\n",
       "2399                            0         12                0  50.4       2"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.iloc[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0], dtype=int64)"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#trying to predict using model\n",
    "coba = x_test.iloc[:1]\n",
    "model_random.predict(coba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8303459774906211"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_random.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.68"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_random.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dari percobaan diatas yang memiliki features tersebut menghasilkan prediksi 0 model score test 0.68"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Randomized Search CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bootstrap': True,\n",
       " 'ccp_alpha': 0.0,\n",
       " 'class_weight': None,\n",
       " 'criterion': 'gini',\n",
       " 'max_depth': 10,\n",
       " 'max_features': 'auto',\n",
       " 'max_leaf_nodes': None,\n",
       " 'max_samples': None,\n",
       " 'min_impurity_decrease': 0.0,\n",
       " 'min_impurity_split': None,\n",
       " 'min_samples_leaf': 1,\n",
       " 'min_samples_split': 2,\n",
       " 'min_weight_fraction_leaf': 0.0,\n",
       " 'n_estimators': 200,\n",
       " 'n_jobs': None,\n",
       " 'oob_score': False,\n",
       " 'random_state': None,\n",
       " 'verbose': 0,\n",
       " 'warm_start': False}"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Parameter yang dipakai di model random asli\n",
    "model_random.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameter_rfc = {\n",
    "#     'criterion' : ['gini', 'entropy'],\n",
    "    'max_depth' : [5, 10, 15, 20, 40, 60],\n",
    "    'min_samples_split' : [2, 5, 10, 20],\n",
    "    'min_samples_leaf' : [1, 2, 4],\n",
    "    'n_estimators' : [100, 200, 400, 600, 800, 1000],\n",
    "    'bootstrap' : [True, False]\n",
    "#     'max_features' : ['auto', 'sqrt', 'log2']\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mencari parameter terbaik pada model: logistic regression\n",
    "\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "model_RF = RandomForestClassifier()\n",
    "model_RF_RS = RandomizedSearchCV(\n",
    "    estimator = model_RF, param_distributions= parameter_rfc, cv = 5\n",
    ")\n",
    "\n",
    "# model_LR2_GS = GridSearchCV( model_LR2, param, cv=5, error_score=0.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 600,\n",
       " 'min_samples_split': 20,\n",
       " 'min_samples_leaf': 4,\n",
       " 'max_depth': 40,\n",
       " 'bootstrap': False}"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_RF_RS.fit(x_train, y_train)\n",
    "model_RF_RS.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "hasil tersebut adalah parameter terbaik dari params yaitu: {'n_estimators': 600,\n",
    " 'min_samples_split': 20,\n",
    " 'min_samples_leaf': 4,\n",
    " 'max_depth': 40,\n",
    " 'bootstrap': False}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[411,   1],\n",
       "       [183,   5]], dtype=int64)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, ax = plt.subplots(figsize=(8,5))\n",
    "sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt=\".0f\", ax=ax)\n",
    "plt.xlabel(\"y Aktual\")\n",
    "plt.ylabel(\"y Prediksi\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.69      1.00      0.82       412\n",
      "           1       0.83      0.03      0.05       188\n",
      "\n",
      "    accuracy                           0.69       600\n",
      "   macro avg       0.76      0.51      0.43       600\n",
      "weighted avg       0.74      0.69      0.58       600\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Confusion Matrix Report\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[373,  39],\n",
       "       [153,  35]], dtype=int64)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test, y_pred_ran)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, ax = plt.subplots(figsize=(8,5))\n",
    "sns.heatmap(confusion_matrix(y_test, y_pred_ran), annot=True, fmt=\".0f\", ax=ax)\n",
    "plt.xlabel(\"y Aktual\")\n",
    "plt.ylabel(\"y Prediksi\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.71      0.91      0.80       412\n",
      "           1       0.47      0.19      0.27       188\n",
      "\n",
      "    accuracy                           0.68       600\n",
      "   macro avg       0.59      0.55      0.53       600\n",
      "weighted avg       0.64      0.68      0.63       600\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Confusion Matrix Report\n",
    "print(classification_report(y_test, y_pred_ran))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dari dua model logistic regression dan random forest menghasil kan nilai recall yang berbeda. logistic regression menghasilkan nilai recall 1 sedangkan random forest menghsilkan recall 0.91 dari dua model tersebut data disimpulkan bahwa model mechine learning yang terbaik adalah logistic regression. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dari logistic evaluation maetric regression tersebut dapat di tingkatkan False positif yaitu actualnya tidak cancel ternyata prediksinya cancel sehingga dapat meningkankan di sisi perusahaannya  untuk: \n",
    "Menghubungi pengunjung terkait kapan perkiraan datang ke hotel,\n",
    "Membersihkan, merapikan, dan menyiapkan kamar sesuai pesanan pengunjung,\n",
    "Menyiapkan makanan dan minuman untuk menyambut kedatangan pengunjung,\n",
    "Menolak pengunjung lain yang memesan kamar yang telah dipesan (booked room), dan\n",
    "Memberi layanan penjemputan di bandara/stasiun/terminal apabila diperlukan."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
